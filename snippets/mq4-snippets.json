{
    "stochasticMT4": {
        "body": "double ${1:stochValue} = iStochastic(${2:_Symbol}, ${3:_Period}, ${4:K_periods}, ${5:D_periods}, ${6:Slowing}, ${7|MODE_SMA,MODE_EMA,MODE_SMMA,MODE_LWMA|}, ${8:0}, ${9|MODE_MAIN,MODE_SIGNAL|}, ${10:pos});",
        "description": "Value of stochastic indicator",
        "prefix": "stochasticMT4",
        "scope": "source.mq4"
    },
    "sar": {
        "body": "double ${1:sarValue} = iSAR(${2:_Symbol}, ${3:_Period}, ${4:step}, ${5:max}, ${6:pos});",
        "description": "Value of Parabolic SAR indicator",
        "prefix": "sar",
        "scope": "source.mq4"
    },
    "averages": {
        "body": "double ${1:maValue} = iMA(${2:_Symbol}, ${3:_Period}, ${4:ma_periods}, ${5:ma_shift}, ${6|MODE_SMA,MODE_EMA,MODE_SMMA,MODE_LWMA|}, ${7|PRICE_CLOSE,PRICE_OPEN,PRICE_HIGH,PRICE_LOW,PRICE_MEDIAN,PRICE_TYPICAL,PRICE_WEIGHTED|}, ${8:pos});",
        "description": "Value of averages indicator",
        "prefix": "averages",
        "scope": "source.mq4"
    },
    "averagesOnArray": {
        "body": "double ${1:maValue} = iMAOnArray(${2:array}, ${3:count}, ${4:ma_periods}, ${5:ma_shift}, ${6|MODE_SMA,MODE_EMA,MODE_SMMA,MODE_LWMA|}, ${7:pos});",
        "description": "Value of averages indicator on array",
        "prefix": "averagesOnArray",
        "scope": "source.mq4"
    },
    "wpr": {
        "body":
        [
            "double ${1:wprValue} = iWPR(${2:_Symbol}, ${3:_Period}, ${4:wpr_periods}, ${5:pos});"
        ],
        "description": "iWPR",
        "prefix": "wpr",
        "scope": "source.mq4"
    },
    "ichimoku": {
        "body":
        [
            "double ${1:ichValue} = iIchimoku(${2:_Symbol}, ${3:_Period}, ${4:tenkan_sen}, ${5:kijun_sen}, ${6:senkou_span_b}, ${7|MODE_TENKANSEN,MODE_KIJUNSEN,MODE_SENKOUSPANA,MODE_SENKOUSPANB,MODE_CHIKOUSPAN|}, ${8:pos});"
        ],
        "description": "iIchimoku",
        "prefix": "ichimoku",
        "scope": "source.mq4"
    },
    "bands": {
        "body":
        [
            "double ${1:bbValue} = iBands(${2:_Symbol}, ${3:_Period}, ${4:period}, ${5:deviation}, ${6:bands_shift}, ${7|PRICE_CLOSE,PRICE_OPEN,PRICE_HIGH,PRICE_LOW,PRICE_MEDIAN,PRICE_TYPICAL,PRICE_WEIGHTED|}, ${8|MODE_MAIN,MODE_UPPER,MODE_LOWER|}, ${9:pos});"
        ],
        "description": "iBands",
        "prefix": "bands",
        "scope": "source.mq4"
    },
    "customIndicatorMT4": {
        "body":
        [
            "double ${1:value} = iCustom(${2:_Symbol}, ${3:_Period}, \"${4:name}\", ${5:params}, ${7:mode}, ${8:pos});"
        ],
        "description": "iCustom",
        "prefix": "customIndicatorMT4",
        "scope": "source.mq4"
    },
    "rsi": {
        "body":
        [
            "double ${1:rsiValue} = iRSI(${2:_Symbol}, ${3:_Period}, ${4:rsi_period}, ${5|PRICE_CLOSE,PRICE_OPEN,PRICE_HIGH,PRICE_LOW,PRICE_MEDIAN,PRICE_TYPICAL,PRICE_WEIGHTED|}, ${6:pos});"
        ],
        "description": "iRSI",
        "prefix": "rsi",
        "scope": "source.mq4"
    },
    "atr":{
        "body":
        [
            "double ${1:atrValue} = iATR(${2:_Symbol}, ${3:_Period}, ${4:atr_period}, ${5:pos});"
        ],
        "description": "iATR",
        "prefix": "atr",
        "scope": "source.mq4"
    },
    "cci":{
        "body":
        [
            "double ${1:cciValue} = iCCI(${2:_Symbol}, ${3:_Period}, ${4:cci_period}, ${5|PRICE_CLOSE,PRICE_OPEN,PRICE_HIGH,PRICE_LOW,PRICE_MEDIAN,PRICE_TYPICAL,PRICE_WEIGHTED|}, ${6:pos});"
        ],
        "description": "iCCI",
        "prefix": "cci",
        "scope": "source.mq4"
    },
    "macd":{
        "body":
        [
            "double ${1:macdValue} = iMACD(${2:_Symbol}, ${3:_Period}, ${4:fast_ema_period}, ${5:slow_ema_period}, ${6:signal_period}, ${7|PRICE_CLOSE,PRICE_OPEN,PRICE_HIGH,PRICE_LOW,PRICE_MEDIAN,PRICE_TYPICAL,PRICE_WEIGHTED|}, ${8|MODE_MAIN,MODE_SIGNAL|}, ${9:pos});"
        ],
        "description": "iMACD",
        "prefix": "macd",
        "scope": "source.mq4"
    },
    "adx":{
        "body":
        [
            "double ${1:adxValue} = iADX(${2:_Symbol}, ${3:_Period}, ${4:adx_period}, ${5|PRICE_CLOSE,PRICE_OPEN,PRICE_HIGH,PRICE_LOW,PRICE_MEDIAN,PRICE_TYPICAL,PRICE_WEIGHTED|}, ${6|MODE_MAIN,MODE_PLUSDI,MODE_MINUSDI|}, ${7:pos});"
        ],
        "description": "iADX",
        "prefix": "adx",
        "scope": "source.mq4"
    },
    "checkCustomIndicator": {
        "body":
        [
            "double temp = iCustom(NULL, 0, \"${1:indicator}\", 0, 0);",
            "if (GetLastError() == ERR_INDICATOR_CANNOT_LOAD)",
            "{",
            "   Alert(\"Please, install the '${1:indicator}' indicator\");",
            "   return INIT_FAILED;",
            "}"
        ],
        "description": "Check wether the custom indicator installed in the system",
        "prefix": "checkCustomIndicator",
        "scope": "source.mq4"
    },
    
    "createArrowStream":{
        "body":
        [
            "SetIndexStyle(${1:index}, ${2|DRAW_LINE,DRAW_SECTION,DRAW_HISTOGRAM,DRAW_ZIGZAG,DRAW_NONE|}, 0, 2);",
            "SetIndexBuffer(${1:index}, ${3:varName});",
            "SetIndexLabel(${1:index}, \"${4:Name}\");",
            "SetIndexArrow(${1:index}, ${5:arrowCode});"
        ],
        "description": "Indicator stream",
        "prefix": "createArrowStream",
        "scope": "source.mq4"
    },
    "createStreamMT4": {
        "body":
        [
            "SetIndexStyle(${1:index}, ${2|DRAW_LINE,DRAW_SECTION,DRAW_HISTOGRAM,DRAW_ARROW,DRAW_ZIGZAG,DRAW_NONE|});",
            "SetIndexBuffer(${1:index}, ${3:varName});",
            "SetIndexLabel(${1:index}, \"${4:Name}\");"
        ],
        "description": "Indicator stream",
        "prefix": "createStreamMT4",
        "scope": "source.mq4"
    },
    "createInternalStream": {
        "body":
        [
            "SetIndexStyle(${1:index}, DRAW_NONE);",
            "SetIndexBuffer(${1:index}, ${2:varName});"
        ],
        "description": "Indicator internal stream",
        "prefix": "createInternalStream",
        "scope": "source.mq4"
    },
    "inputAveragesType": {
        "body":
        [
            "input ENUM_MA_METHOD ${1:name} = ${2|MODE_SMA,MODE_EMA,MODE_SMMA,MODE_LWMA|}; // ${3:Smoothing method}"
        ],
        "description": "Input parameter of averages type",
        "prefix": "inputAveragesType",
        "scope": "source.mq4"
    },
    "inputPriceType": {
        "body":
        [
            "input ENUM_APPLIED_PRICE ${1:name} = ${2|PRICE_OPEN,PRICE_LOW,PRICE_HIGH,PRICE_CLOSE,PRICE_MEDIAN,PRICE_TYPICAL,PRICE_WEIGHTED|}; // ${3:Price type}"
        ],
        "description": "Input parameter of averages type",
        "prefix": "inputPriceType",
        "scope": "source.mq4"
    },
    "pipSize": {
        "body":
        [
            "double point = MarketInfo(${1:_Symbol}, MODE_POINT);",
            "int digits = (int)MarketInfo(${1:_Symbol}, MODE_DIGITS);", 
            "int mult = digits == 3 || digits == 5 ? 10 : 1;",
            "double pipSize = point * mult;"
        ],
        "description": "",
        "prefix": "pipSize",
        "scope": "source.mq4"
    },
    "inputCorner": {
        "body":
        [
            "input ENUM_BASE_CORNER ${1:name} = ${2|CORNER_LEFT_UPPER,CORNER_LEFT_LOWER,CORNER_RIGHT_LOWER,CORNER_RIGHT_UPPER|}; // ${3:Corner}"
        ],
        "description": "Input parameter of a corder",
        "prefix": "inputCorner",
        "scope": "source.mq4"
    },
    "createTextObjectMT4": {
        "body":
        [
            "ResetLastError();",
            "string ${1:id} = ${2:IndicatorObjPrefix + \"idValue\"};",
            "if (ObjectFind(0, id) == -1)",
            "{",
            "   if (!ObjectCreate(${3:chartId}, ${1:id}, OBJ_TEXT, ${4:sub_window}, ${5:time}, ${6:price}))",
            "   {",
            "      Print(__FUNCTION__, \". Error: \", GetLastError());",
            "      return ;",
            "   }",
            "   ObjectSetString(${3:chartId}, ${1:id}, OBJPROP_FONT, ${8:font});",
            "   ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_FONTSIZE, ${9:font_size});",
            "   ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_COLOR, ${10:clr});",
            "   ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_ANCHOR, ${11|ANCHOR_LEFT_UPPER,ANCHOR_LEFT,ANCHOR_LEFT_LOWER,ANCHOR_LOWER,ANCHOR_RIGHT_LOWER,ANCHOR_RIGHT,ANCHOR_RIGHT_UPPER,ANCHOR_UPPER,ANCHOR_CENTER|});",
            "   ObjectSetDouble(${3:chartId}, ${1:id}, OBJPROP_ANGLE, ${12:angle});",
            "   ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_BACK, ${13:back});",
            "   ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_SELECTABLE, ${14:selection});",
            "   ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_SELECTED, ${15:selection});",
            "   ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_HIDDEN, ${16:hidden});",
            "   ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_ZORDER, ${17:z_order});",
            "}",
            "ObjectSetString(${3:chartId}, ${1:id}, OBJPROP_TEXT, ${7:text});"
        ],
        "description": "MT4: Creates text object",
        "prefix": "createTextObjectMT4",
        "scope": "source.mq4"
    },
    "createLabelObj": {
        "body":
        [
            "ResetLastError();",
            "string ${1:id} = ${2:IndicatorObjPrefix + \"idValue\"};",
            "if (ObjectFind(0, id) == -1)",
            "{",
            "   if (!ObjectCreate(${3:chartId}, ${1:id}, OBJ_LABEL, ${4:sub_window}, 0, 0))",
            "   {",
            "      Print(__FUNCTION__, \". Error: \", GetLastError());",
            "      return ;",
            "   }",
            "   ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_XDISTANCE, ${5:x});",
            "   ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_YDISTANCE, ${6:y});",
            "   ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_CORNER, ${7|CORNER_LEFT_UPPER,CORNER_LEFT_LOWER,CORNER_RIGHT_LOWER,CORNER_RIGHT_UPPER|});",
            "   ObjectSetString(${3:chartId}, ${1:id}, OBJPROP_FONT, ${9:font});",
            "   ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_FONTSIZE, ${10:font_size});",
            "   ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_COLOR, ${11:clr});",
            "   ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_ANCHOR, ${12|ANCHOR_LEFT_UPPER,ANCHOR_LEFT,ANCHOR_LEFT_LOWER,ANCHOR_LOWER,ANCHOR_RIGHT_LOWER,ANCHOR_RIGHT,ANCHOR_RIGHT_UPPER,ANCHOR_UPPER,ANCHOR_CENTER|});",
            "   ObjectSetDouble(${3:chartId}, ${1:id}, OBJPROP_ANGLE, ${13:angle});",
            "   ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_BACK, ${14:back});",
            "   ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_SELECTABLE, ${15:selection});",
            "   ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_SELECTED, ${16:selection});",
            "   ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_HIDDEN, ${17:hidden});",
            "   ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_ZORDER, ${18:z_order});",
            "}",
            "ObjectSetString(${3:chartId}, ${1:id}, OBJPROP_TEXT, ${8:text});"
        ],
        "description": "Creates label object",
        "prefix": "createLabelObj",
        "scope": "source.mq4"
    },
    "createHLineObjMT4": {
        "body":
        [
            "ResetLastError();",
            "string ${1:id} = ${2:IndicatorObjPrefix + \"idValue\"};",
            "if (ObjectFind(0, ${1:id}) == -1)",
            "{",
            "   if (!ObjectCreate(${3:chartId}, ${1:id}, OBJ_HLINE, ${4:sub_window}, 0, ${5:price}))",
            "   {",
            "      Print(__FUNCTION__, \". Error: \", GetLastError());",
            "      return ;",
            "   }",
            "   ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_COLOR, ${6:clr});",
            "   ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_STYLE, ${7|STYLE_SOLID,STYLE_DASH,STYLE_DOT,STYLE_DASHDOT,STYLE_DASHDOTDOT|});",
            "   ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_WIDTH, ${8:width});",
            "   ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_BACK, ${9:back});",
            "   ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_SELECTABLE, ${10:selection});",
            "   ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_SELECTED, ${11:selection});",
            "   ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_HIDDEN, ${12:hidden});",
            "   ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_ZORDER, ${13:z_order});",
            "}",
            "ObjectSetDouble(${3:chartId}, ${1:id}, OBJPROP_PRICE, ${5:price});"
        ],
        "description": "Creates horizonal line object",
        "prefix": "createHLineObjMT4",
        "scope": "source.mq4"
    },
    "createTrendObjMT4": {
        "body":
        [
            "ResetLastError();",
            "string ${1:id} = ${2:IndicatorObjPrefix + \"idValue\"};",
            "if (ObjectFind(0, ${1:id}) == -1)",
            "{",
            "   if (!ObjectCreate(${3:chartId}, ${1:id}, OBJ_TREND, ${4:sub_window}, ${5:time1}, ${6:price1}, ${7:time2}, ${8:price2}))",
            "   {",
            "      Print(__FUNCTION__, \". Error: \", GetLastError());",
            "      return ;",
            "   }",
            "   ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_COLOR, ${9:clr});",
            "   ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_STYLE, ${10|STYLE_SOLID,STYLE_DASH,STYLE_DOT,STYLE_DASHDOT,STYLE_DASHDOTDOT|});",
            "   ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_WIDTH, ${11:width});",
            "   ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_RAY_RIGHT, ${12|true,false|});",
            "   ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_BACK, ${13:back});",
            "   ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_SELECTABLE, ${14:selection});",
            "   ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_SELECTED, ${15:selection});",
            "   ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_HIDDEN, ${16:hidden});",
            "   ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_ZORDER, ${17:z_order});",
            "}",
            "ObjectSetDouble(${3:chartId}, ${1:id}, OBJPROP_PRICE1, ${6:price1});",
            "ObjectSetDouble(${3:chartId}, ${1:id}, OBJPROP_PRICE2, ${8:price2});"
        ],
        "description": "Creates trend object",
        "prefix": "createTrendObjMT4",
        "scope": "source.mq4"
    },
    "createRectangleObj": {
        "body":
        [
            "ResetLastError();",
            "string ${1:id} = ${2:IndicatorObjPrefix + \"idValue\"};",
            "if (!ObjectCreate(${3:chartId}, ${1:id}, OBJ_RECTANGLE, ${4:sub_window}, ${5:time1}, ${6:price1}, ${7:time2}, ${8:price2}))",
            "{",
            "   Print(__FUNCTION__, \". Error: \", GetLastError());",
            "   return ;",
            "}",
            "ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_COLOR, ${9:clr});",
            "ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_STYLE, ${10|STYLE_SOLID,STYLE_DASH,STYLE_DOT,STYLE_DASHDOT,STYLE_DASHDOTDOT|});",
            "ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_WIDTH, ${11:width});",
            "ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_FILL, ${12|true,false|});",
            "ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_BACK, ${13:back});",
            "ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_SELECTABLE, ${14:selection});",
            "ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_SELECTED, ${15:selection});",
            "ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_HIDDEN, ${16:hidden});",
            "ObjectSetInteger(${3:chartId}, ${1:id}, OBJPROP_ZORDER, ${16:z_order});"
        ],
        "description": "Creates rectangle object",
        "prefix": "createRectangleObj",
        "scope": "source.mq4"
    },
    "enumLineStyle": {
        "body":
        [
            "${1|STYLE_SOLID,STYLE_DASH,STYLE_DOT,STYLE_DASHDOT,STYLE_DASHDOTDOT|}"
        ],
        "description": "Creates line style value",
        "prefix": "enumLineStyle",
        "scope": "source.mq4"
    },
    "enumAnchor": {
        "body":
        [
            "${1|ANCHOR_LEFT_UPPER,ANCHOR_LEFT,ANCHOR_LEFT_LOWER,ANCHOR_LOWER,ANCHOR_RIGHT_LOWER,ANCHOR_RIGHT,ANCHOR_RIGHT_UPPER,ANCHOR_UPPER,ANCHOR_CENTER|}"
        ],
        "description": "Anchor lookup",
        "prefix": "enumAnchor",
        "scope": "source.mq4"
    },
    "inputLineStyle": {
        "body":
        [
            "input ENUM_LINE_STYLE ${1:paramName} = ${2|STYLE_SOLID,STYLE_DASH,STYLE_DOT,STYLE_DASHDOT,STYLE_DASHDOTDOT|}; // ${3:Line style}"
        ],
        "description": "Creates line style input",
        "prefix": "inputLineStyle",
        "scope": "source.mq4"
    },
    "inputLineStyling": {
        "body":
        [
            "input color ${1:paramName}_color = ${2:Red}; // ${3:Line} color",
            "input int ${1:paramName}_width = ${4:1}; // ${3:Line} style",
            "input ENUM_LINE_STYLE ${1:paramName}_style = ${5|STYLE_SOLID,STYLE_DASH,STYLE_DOT,STYLE_DASHDOT,STYLE_DASHDOTDOT|}; // ${3:Line} style"
        ],
        "description": "Creates line color/width/style input",
        "prefix": "inputLineStyling",
        "scope": "source.mq4"
    },
    "inputTimeframe": {
        "body":
        [
            "input ENUM_TIMEFRAMES ${1:paramName} = ${2|PERIOD_CURRENT,PERIOD_M1,PERIOD_M5,PERIOD_M15,PERIOD_M30,PERIOD_H1,PERIOD_H4,PERIOD_D1,PERIOD_W1,PERIOD_MN1|}; // ${3:Timeframe}"
        ],
        "description": "Creates timeframe input",
        "prefix": "inputTimeframe",
        "scope": "source.mq4"
    },
    "forArray": {
        "body":
        [
            "for (int i = 0; i < ArraySize(${1:array}); ++i)",
            "{",
            "   ${2:data_type} item = ${1:array}[i];",
            "}"
        ],
        "description": "Iterate array values",
        "prefix": "forArray",
        "scope": "source.mq4"
    },
    "deleteArray": {
        "body":
        [
            "for (int i = 0; i < ArraySize(${1:array}); ++i)",
            "{",
            "   delete ${1:array}[i];",
            "}",
            "ArrayResize(${1:array}, 0);"
        ],
        "description": "Deletes array of objects",
        "prefix": "deleteArray",
        "scope": "source.mq4"
    },
    "resizeArray": {
        "body":
        [
            "int size = ArraySize(${1:array});",
            "ArrayResize(${1:array}, size + ${2:n});"
        ],
        "description": "Deletes array of objects",
        "prefix": "resizeArray",
        "scope": "source.mq4"
    },
    "iLowest": {
        "body":
        [
            "int ${1:lowestIndex} = iLowest(${2:_Symbol}, ${3:_Period}, ${4|MODE_OPEN,MODE_LOW,MODE_HIGH,MODE_CLOSE,MODE_VOLUME,MODE_TIME|}, ${5:count}, ${6:start});"
        ],
        "description": "Find index of lowest value",
        "prefix": "iLowest",
        "scope": "source.mq4"
    },
    "iHighest": {
        "body":
        [
            "int ${1:highestIndex} = iHighest(${2:_Symbol}, ${3:_Period}, ${4|MODE_OPEN,MODE_LOW,MODE_HIGH,MODE_CLOSE,MODE_VOLUME,MODE_TIME|}, ${5:count}, ${6:start});"
        ],
        "description": "Find index of higest value",
        "prefix": "iHighest",
        "scope": "source.mq4"
    },
    "iLowestLow": {
        "body":
        [
            "int ${1:lowestIndex} = iLowest(${2:_Symbol}, ${3:_Period}, MODE_LOW, ${4:count}, ${5:start});",
            "double ${6:lowest} = iLow(${2:_Symbol}, ${3:_Period}, ${1:lowestIndex});"
        ],
        "description": "Find lowest low value",
        "prefix": "iLowestLow",
        "scope": "source.mq4"
    },
    "iHighestHigh": {
        "body":
        [
            "int ${1:highestIndex} = iHighest(${2:_Symbol}, ${3:_Period}, MODE_HIGH, ${4:count}, ${5:start});",
            "double ${6:highest} = iHigh(${2:_Symbol}, ${3:_Period}, ${1:highestIndex});"
        ],
        "description": "Find highest high value",
        "prefix": "iHighestHigh",
        "scope": "source.mq4"
    }
}